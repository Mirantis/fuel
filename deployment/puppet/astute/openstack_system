#!/usr/bin/env ruby
require 'optparse'

ORCHESTRATION_ROLES = %w(controller compute quantum storage swift-proxy primary-controller primary-swift-proxy)
HA_DEPLOYMENT_MODES = %w(ha_compute ha_compact ha_full ha_minimal)
SITE_PPS = {
    :ha_compute.to_s => '/etc/puppet/modules/openstack/examples/site_openstack_ha_compact.pp',
    :ha_compact.to_s => '/etc/puppet/modules/openstack/examples/site_openstack_ha_compact.pp',
    :ha_full.to_s => '/etc/puppet/modules/openstack/examples/site_openstack_ha_full.pp',
    :ha_minimal.to_s => '/etc/puppet/modules/openstack/examples/site_openstack_ha_minimal.pp',
    :multinode_compute.to_s => '/etc/puppet/modules/openstack/examples/site_openstack_simple.pp',
    :singlenode_compute.to_s => '/etc/puppet/modules/openstack/examples/site_openstack_single.pp',
}

class Template
  def self.p_(value)
    if value.is_a? Hash
      return self._hash(value)
    end
    if value.is_a? Array
      return self._list(value)
    end
    if value.is_a? TrueClass or value.is_a? FalseClass
      return value.to_s
    end
    if value.is_a? Integer
      return value.to_s
    end
    if value.nil?
      return 'undef'
    end
    self._str(value)
  end

  def self._hash(value)
    '{%s}' % value.collect() do |k, v|
      "%s => %s" % [self.p_(k), self.p_(v)]
    end.join(',')
  end

  def self._list(value)
    '[%s]' % value.collect() do |k|
      "%s" % self.p_(k)
    end.join(",")
  end

  def self._str(value)
    ret = value.to_s()
    if ret[0..0] == '$'
      return ret
    end
    '"%s"' % ret
  end

  def self._replace(template, key, value)
    if template.gsub!(/^(\$#{key})\s*=.*/, "\\1 = " + self.p_(value)).nil?
      raise ArgumentError, "Variable '#{key}' not found"
    end
    template
  end

  def initialize(path)
    @value = File.read(path)
  end

  def replace(hash)
    hash.each do |key, value|
      next if value.nil?
      @value = Template._replace(@value, key, value)
    end
    self
  end

  def to_s()
    @value.to_s()
  end
end

class ConfigYaml
  def initialize(yaml)
    ConfigYaml.validate(yaml)
    @yaml=yaml
  end

  def self.validate(yaml)

  end

  def self.load_file(path)
    require 'yaml'
    return ConfigYaml.new(YAML.load_file(path))
  end

  def common()
    @yaml['common']
  end

  def orchestrator_common()
    self.common['orchestrator_common']
  end

  def deployment_mode()
    self.orchestrator_common['attributes']['deployment_mode']
  end

  def ha?
    HA_DEPLOYMENT_MODES.include? self.deployment_mode()
  end

  def settings()
    self.common()['openstack_common']
  end

  def mandatory(key)
    result = self.settings()[key]
    if result.nil?
      raise "Undefined %s in template" % key
    end
    result
  end

  def obligatory(key)
    self.settings()[key]
  end

  def internal_virtual_ip()
    if self.ha?
      self.mandatory('internal_virtual_ip')
    else
      self.obligatory('internal_virtual_ip')
    end
  end

  def public_virtual_ip()
    if self.ha?
      self.mandatory('public_virtual_ip')
    else
      self.obligatory('public_virtual_ip')
    end
  end

  def floating_range()
    self.obligatory('floating_range')
  end

  def fixed_range()
    self.mandatory('fixed_range')
  end

  def mirror_type()
    self.mandatory('mirror_type')
  end

  def public_netmask()
    self.mandatory('public_netmask')
  end

  def internal_netmask()
    self.mandatory('internal_netmask')
  end

  def template()
    self.obligatory('template')
  end

  def quantums()

  end

  def quantum()
    self.mandatory('quantum')
  end

  def swift_proxies()

  end

  def controllers()

  end

  def loopback()
    self.mandatory('loopback')
  end

  def cinder()
    self.mandatory('cinder')
  end

  def cinder_nodes()
    self.mandatory('cinder_nodes')
  end

  def use_syslog()
    self.mandatory('use_syslog')
  end

  def swift()
    self.mandatory('swift')
  end

  def default_gateway()
    self.mandatory('default_gateway')
  end

  def nagios_master()
    self.mandatory('nagios_master')
  end

  def public_interface()
    self.mandatory('public_interface')
  end

  def internal_interface()
    self.mandatory('internal_interface')
  end

  def private_interface()
    self.mandatory('private_interface')
  end

  def nv_physical_volumes()
    self.mandatory('nv_physical_volumes')
  end

  def segment_range()
    self.obligatory('segment_range')
  end

  def tenant_network_type()
    self.obligatory('tenant_network_type')
  end

  def repo_proxy()
    self.mandatory('repo_proxy')
  end

  def external_ip_info()
    self.mandatory('external_ip_info')
  end

  def dns_nameservers()
    self.mandatory('dns_nameservers')
  end

  def nodes()
    self.mandatory('nodes')
  end

  def deployment_id()
    self.obligatory('deployment_id')
  end

  def swift_loopback()
    self.obligatory('swift_loopback')
  end

  def network_manager()
    self.obligatory('network_manager')
  end

  def auto_assign_floating_ip()
    self.obligatory('auto_assign_floating_ip')
  end

  def quantum_netnode_on_cnt()
    self.obligatory('quantum_netnode_on_cnt')
  end
end

class Manifest
  def self.prepare_manifest(template, config)
    if config.ha?
      template.replace(:internal_virtual_ip => config.internal_virtual_ip(),
                       :public_virtual_ip => config.public_virtual_ip()
      )
    end
    template.replace(:deployment_id => config.deployment_id()) unless config.deployment_id().nil?
    template.replace(:floating_range => config.floating_range(),
                     :fixed_range => config.fixed_range(),
                     :mirror_type => config.mirror_type(),
                     :public_interface => config.public_interface(),
                     :internal_interface => config.internal_interface(),
                     :private_interface => config.private_interface(),
                     :nv_physical_volume => config.nv_physical_volumes(),
                     :use_syslog => config.use_syslog(),
                     :cinder => config.cinder(),
                     :tenant_network_type => config.tenant_network_type(),
                     :cinder_nodes => config.cinder_nodes(),
                     :nagios_master => config.nagios_master(),
                     :external_ipinfo => config.external_ip_info(),
                     :nodes => config.nodes(),
                     :dns_nameservers => config.dns_nameservers(),
                     :default_gateway => config.default_gateway(),
                     :segment_range => config.segment_range(),
                     :repo_proxy => config.repo_proxy(),
                     :public_netmask => config.public_netmask(),
                     :internal_netmask => config.internal_netmask(),
                     :network_manager => config.network_manager(),
                     :auto_assign_floating_ip => config.auto_assign_floating_ip(),
                     :quantum_netnode_on_cnt=> config.quantum_netnode_on_cnt()
    )
    if config.swift()
      template.replace(:swift_loopback => config.swift_loopback()) unless config.swift_loopback().nil?
    end
    template.replace(:quantum => config.quantum())
  end
end

class Astute
  def self.prepare_config(config)
    nodes = config.nodes().select do |node|
      !(ORCHESTRATION_ROLES & [node['role']]).empty?
    end.
        collect do |node|
          {:uid.to_s => node['name'], :role.to_s => node['role']}
        end
    YAML.dump({:nodes.to_s => nodes}.update(
        config.orchestrator_common().update(
            {:attributes.to_s => {:deployment_mode.to_s => 'ha_full', :deployment_engine.to_s =>'simplepuppet'}})))
  end
end


options={}
parser = OptionParser.new do |opts|
  opts.banner = "Usage: openstack_system.rb -c CONFIG -t TEMPLATE -o SITE_PP -a ASTUTE"

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end

  opts.on("-c CONFIG", "Config file in yaml") do |c|
    options[:config] = c
  end

  opts.on("-t TEMPLATE", "template for site.pp") do |t|
    options[:template] = t
  end

  opts.on("-o SITE_PP", "Resulting site.pp file") do |o|
    options[:output] = o
  end

  opts.on("-a ASTUTE", "Resulting astute.yaml file") do |a|
    options[:astute] = a
  end

  opts.on("-h", "This help.") { puts opts; exit }
end

parser.parse!(ARGV)

if options[:config].nil?
  puts parser
  exit 1
end

config = ConfigYaml.load_file(options[:config])

if options[:output].nil? and options[:astute].nil?
  puts parser
  exit 2
end

if options[:template].nil?
  options[:template] = SITE_PPS[config.deployment_mode]
end

if options[:template].nil?
  puts parser
  exit 4
end

template = Template.new(options[:template])

unless options[:output].nil?
  File.open(options[:output], 'w') { |f|
    f.write Manifest.prepare_manifest(template, config)
  }
end

unless options[:astute].nil?
  File.open(options[:astute], 'w') { |f|
    f.write Astute.prepare_config(config)
  }
end
