echo > /tmp/partition.ks
#import json
#if $getVar("ks_spaces","{}") != "{}"
    ##
    #set $j = $getVar("ks_spaces","[]")
    #set $spaces = $json.loads($j)
    #set $clearpart_drives = $set([])
    #set $physical_volumes = []
    #set $partitions = []
    #set $volume_groups = {}
    #set $logical_volumes = []
    #set $post_logical_volumes = []
    #set $pvnum = 0
    ##
    #for $space in $spaces
        #set $space_id = $space.get("id")
        #set $space_type = $space.get("type")
        #set $space_volumes = $space.get("volumes")
        ##
        ## Adding disk to clearpart list of drives
        #if $space_type == "disk"
            $clearpart_drives.add($space_id)
        #end if
        ##
        #for $volume in $space_volumes
            #set $volume_id = $volume.get("id")
            #set $volume_type = $volume.get("type")
            ##
            ## Parsing volume groups and physical volumes
            #if $space_type == "disk" and $volume_type == "pv"
                #set $volume_vg = $volume.get("vg")
                #set $volume_size = $int($volume.get("size") or 0) / 1024 ** 2
                #set $volume_name = "pv.%03d" % $pvnum
                #if $volume_size > 0
                    $physical_volumes.append("partition %s --size=%s --ondisk=%s" % ($volume_name, $volume_size, $space_id))
                    #if not $volume_groups.get($volume_vg)
                        #set $volume_groups[$volume_vg] = [$volume_name]
                    #else
                        $volume_groups[$volume_vg].append($volume_name)
                    #end if
                    #set $pvnum += 1
                #end if
            #end if
            ##
            ## Parsing bare partitions
            #if $space_type == "disk" and $volume_type == "partition"
                #set $volume_mount = $volume.get("mount")
                #set $volume_size = $int($volume.get("size") or 0) / 1024 ** 2
                #if $volume_size > 0
                    $partitions.append("partition %s --size=%s --ondisk=%s" % ($volume_mount, $volume_size, $space_id))
                #end if
            #end if
            ##
            ## Writing bootloader to MBR
            #if $space_type == "disk" and $volume_type == "mbr"
echo "bootloader --location=mbr --driveorder=\$(basename `readlink -f /dev/$space_id`) --append=' biosdevname=0 crashkernel=auto'" > /tmp/bootloader.ks
            #end if
            ##
            ## Parsing logical volumes
            #if $space_type == "vg" and $volume_type == "lv"
                #set $volume_mount = $volume.get("mount")
                ## getting volume size in MB
                #set $volume_size = $int($volume.get("size") or 0) / 1024 ** 2
                #set $volume_name = $volume.get("name")
                ##
                ## Anaconda has hard coded limitation of 16TB for ext3/4 and xfs filesystems (the only filesystems we are supposed to use).
                ## Besides there is no stable 64-bit ext4 implementation at the moment, so the limitation of 16TB is not only anaconda limitation.
                ## Root partition can not be located on xfs filesystem therefore we check if root filesystem is larger
                ## than 16TB and set it size into 16TB if it is. It is necessary to note that to format 16TB volume on ext4 it is needed about 1G memory.
                #if $volume_size > 16777216 and $volume_mount == "/"
                    #set $volume_size = 16777216
                #end if
                ## volume_size is less than or equal to 16TB
                #if $volume_size > 0 and $volume_size <= 16777216
                    $logical_volumes.append("logvol %s --vgname=%s --size=%s --name=%s" % ($volume_mount, $space_id, $volume_size, $volume_name))
                ## volume_size is more than 16TB, use xfs file system
                #else
                    $post_logical_volumes.append("lvcreate --size %s --name %s %s" % ($volume_size, $volume_name, $space_id))
                    $post_logical_volumes.append("mkfs.xfs /dev/mapper/%s-%s" % ($space_id, $volume_name))
                    $post_logical_volumes.append("mkdir -p /mnt/sysimage%s" % $volume_mount)
                    $post_logical_volumes.append("echo '/dev/mapper/%s-%s %s xfs defaults 0 0' >> /mnt/sysimage/etc/fstab" % ($space_id, $volume_name, $volume_mount))
                #end if
            #end if
            ##
        #end for
    #end for
    ##
    ## Cleaning disks
    #if $clearpart_drives
        #set $clearpart_drives_string = ','.join(list($clearpart_drives))
echo "clearpart --initlabel --all --drives=$clearpart_drives_string" >> /tmp/partition.ks
        #for $d in list($clearpart_drives)
/usr/sbin/parted -s "/dev/$d" mklabel gpt
        #end for
    #end if
    ##
    ## Creating bare partitions
    #for $partition in $partitions
echo "$partition" >> /tmp/partition.ks
    #end for
    ##
    ## Creating physical volumes
    #for $pv in $physical_volumes
echo "$pv" >> /tmp/partition.ks
    #end for
    ##
    ## Creating volume groups
    #for $volgroup in $volume_groups.keys()
        #set $ks_pvs = " ".join($volume_groups.get($volgroup))
echo "volgroup $volgroup $ks_pvs" >> /tmp/partition.ks
    #end for
    ##
    ## Creating logical volumes
    #for $lv in $logical_volumes
echo "$lv" >> /tmp/partition.ks
    #end for
    ##
    ## Creating logical volumes in %post section
echo "%post --nochroot" > /tmp/post_partition.ks
    #for $lv in $post_logical_volumes
echo "$lv" >> /tmp/post_partition.ks
    #end for
    ##
    ##
#end if
